---
import "@/styles/globals.css";
import { ModeToggle } from "@/components/ModeToggle";
import type { TreeItem, SearchData, SearchHeading } from "@/lib/types";
import Tree from "@components/Tree.svelte";
import { CommandMenu } from "@components/Search";
import ForceGraph from "@components/ForceGraph";
import { ViewTransitions } from "astro:transitions";

interface Props {
  title: string;
}

const { title } = Astro.props;

const posts = await Astro.glob("../posts/**/*.md");

let result: TreeItem[] = [];
let level = { result };

posts.forEach((post, _index) => {
  const rel_path = post.file.split("src/posts/")[1];
  const sanitized = rel_path.split(".md")[0];

  rel_path.split("/").reduce((r, name) => {
    if (!r[name]) {
      r[name] = { result: [] };
      if (name.endsWith(".md")) {
        r.result.push({
          title: name.replace(".md", ""),
          url: `/${sanitized}`,
          children: undefined,
          icon: "file",
        });
      } else {
        r.result.push({
          title: name,
          children: r[name].result,
          icon: "folder",
        });
      }
    }

    return r[name];
  }, level);
});
const data = result;

const searchData: SearchData[] = posts.map((post) => {
  const path = post.file.split("src/posts/")[1];
  const sanitized = path.split(".md")[0];

  return {
    url: `/${sanitized}`,
    title: sanitized,
  } satisfies SearchData;
});

const searchHeadings: SearchHeading[] = posts.flatMap((post) => {
  const path = post.file.split("src/posts/")[1];
  const sanitized = path.split(".md")[0];

  return post.getHeadings().map((heading) => {
    const hash = "#".repeat(heading.depth);

    return {
      url: `/${sanitized}`,
      slug: `#${heading.slug}`,
      title: `${sanitized}${hash}${heading.slug}`,
    } satisfies SearchHeading;
  });
});
---

<script is:inline>
  function setDarkMode(document) {
    const getThemePreference = () => {
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        return localStorage.getItem("theme");
      }
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    };
    const isDark = getThemePreference() === "dark";

    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
  }

  setDarkMode(document);

  document.addEventListener("astro:before-swap", (event) => {
    setDarkMode(event.newDocument);
  });
</script>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      href="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css"
      rel="stylesheet"
    />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body class="flex flex-col">
    <header
      class="z-10 flex justify-between items-center px-5 bg-background h-14 w-dvw top-0 fixed border-b-[1px]"
    >
      <a href="/" class="text-2xl">Obsidian</a>
      <div>
        <ForceGraph client:only="react" />
        <CommandMenu
          transition:persist
          client:load
          {searchData}
          {searchHeadings}
        />
        <ModeToggle transition:persist client:visible />
      </div>
    </header>
    <Tree transition:persist client:load treeItems={data} />
    <main
      class="mx-6 lg:mx-80 text-start self-center w-full max-w-screen-lg mt-14 min-h-svh"
    >
      <slot />
    </main>
    <!-- <footer
      class="z-10 flex items-center px-5 relative h-14 w-full bg-black border-t-[1px]"
    >
    </footer> -->
  </body>
</html>
