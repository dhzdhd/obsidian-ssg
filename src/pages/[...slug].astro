---
import type { GetStaticPaths } from "astro";
import "@/styles/globals.css";
import Layout from "../layouts/Layout.astro";
import TOC from "@components/TOC.svelte";
import type { MarkdownInstance } from "astro";

export const getStaticPaths: GetStaticPaths = (async () => {
  const posts = await Astro.glob("../posts/**/*.md");

  return posts.map((post) => {
    const rel_path = post.file.split("src/posts/")[1];
    const sanitized = rel_path.split(".md")[0];

    return {
      params: {
        slug: sanitized,
      },
      props: {
        post,
      },
    };
  });
}) satisfies GetStaticPaths;

const { Content } = Astro.props.post as { Content: any };

const post = Astro.props.post as MarkdownInstance<Record<string, any>>;
const data = post.getHeadings().filter((val) => val.depth != 1);
---

<Layout transition:persist title="Hello">
  <TOC client:load data={data} />
  <article class="p-5 prose prose-base dark:prose-invert max-w-none">
    <Content />
  </article>
</Layout>
